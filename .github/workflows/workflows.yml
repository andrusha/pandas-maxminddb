name: CI

on: push

jobs:

### Style

  lint_python:
    name: Lint Python
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.8
        cache: pip
        cache-dependency-path: noxfile.py
    - run: pip install nox
    - run: nox -s lint

  lint_rust:
    name: Lint Rust
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        components: rustfmt, clippy
        default: true
    - uses: Swatinem/rust-cache@v2
      continue-on-error: true
    - run: cargo clippy

### Tests

  test_python:
    name: Test Python
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ['3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            noxfile.py
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - uses: Swatinem/rust-cache@v2
        continue-on-error: true
      - run: pip install nox
      - name: Run tests
        env:
          PY_VERSION: ${{ matrix.python_version }}
        run: |
          echo "version=$PY_VERSION" > $(pwd)/pyo3.conf
          PYO3_CONFIG_FILE=$(pwd)/pyo3.conf nox -s test

  test_rust:
    name: Test Rust
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ['3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          cache: pip
          cache-dependency-path: pyproject.toml
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - uses: Swatinem/rust-cache@v2
        continue-on-error: true
      - run: pip install .
      - run: cargo test --no-default-features

  benchmark:
    name: Benchmark
    needs: [test_python, test_rust]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - uses: Swatinem/rust-cache@v2
        continue-on-error: true
      - name: Install libmaxminddb
        run: |
          sudo add-apt-repository ppa:maxmind/ppa
          sudo apt update
          sudo apt install libmaxminddb0 libmaxminddb-dev mmdb-bin
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
          cache-dependency-path: |
            pyproject.toml
            noxfile.py
      # Needed in order to pick up the C extension properly
      - name: Force reinstall maxminddb
        run: pip install maxminddb --force-reinstall --verbose --no-cache-dir
      - run: pip install nox
      - name: Bench
        run: |
          echo "version=3.8" > $(pwd)/pyo3.conf
          PYO3_CONFIG_FILE=$(pwd)/pyo3.conf nox -s test

### Artifacts

  macos:
    name: macOS Build
    needs: [test_python, test_rust]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --sdist
      - name: Install built wheel - x86_64
        run: |
          pip install pandas_maxminddb --no-index --find-links dist --force-reinstall
          python -c "import pandas_maxminddb"
      - name: Build wheels - universal2
        uses: messense/maturin-action@v1
        with:
          args: --release --universal2 --out dist
      - name: Install built wheel - universal2
        run: |
          pip install pandas_maxminddb --no-index --find-links dist --force-reinstall
          python -c "import pandas_maxminddb"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  windows:
    name: Windows Build
    needs: [test_python, test_rust]
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: ${{ matrix.target }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
      - name: Install built wheel
        run: |
          pip install pandas_maxminddb --no-index --find-links dist --force-reinstall
          python -c "import pandas_maxminddb"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux:
    name: Linux Build
    needs: [test_python, test_rust]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install pandas_maxminddb --no-index --find-links dist --force-reinstall
          python -c "import pandas_maxminddb"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux-cross:
    name: Linux ARM Build
    needs: [test_python, test_rust]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64, armv7]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Install built wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip
          run: |
            pip3 install pandas_maxminddb --no-index --find-links dist/ --force-reinstall
            python3 -c "import pandas_maxminddb"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  musllinux:
    name: Linux w/musl Build
    needs: [test_python, test_rust]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: --release --out dist
      - name: Install built wheel
        if: matrix.target == 'x86_64-unknown-linux-musl'
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/io -w /io
          run: |
            apk add py3-pip
            pip3 install -U pip
            pip3 install pandas_maxminddb --no-index --find-links /io/dist/ --force-reinstall
            python3 -c "import pandas_maxminddb"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  musllinux-cross:
    name: Linux w/musl ARM Build
    needs: [test_python, test_rust]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - target: aarch64-unknown-linux-musl
            arch: aarch64
          - target: armv7-unknown-linux-musleabihf
            arch: armv7
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          manylinux: musllinux_1_2
          args: --release --out dist
      - uses: uraimo/run-on-arch-action@master
        name: Install built wheel
        with:
          arch: ${{ matrix.platform.arch }}
          distro: alpine_latest
          githubToken: ${{ github.token }}
          install: |
            apk add py3-pip
            pip3 install -U pip
          run: |
            pip3 install pandas_maxminddb --no-index --find-links dist/ --force-reinstall
            python3 -c "import pandas_maxminddb"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
